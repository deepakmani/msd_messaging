{"ast":null,"code":"import _toConsumableArray from \"/Users/deepakabs/programming/node_projects/msd_messaging/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/deepakabs/programming/node_projects/msd_messaging/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/deepakabs/programming/node_projects/msd_messaging/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/deepakabs/programming/node_projects/msd_messaging/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/deepakabs/programming/node_projects/msd_messaging/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/deepakabs/programming/node_projects/msd_messaging/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/deepakabs/programming/node_projects/msd_messaging/client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/deepakabs/programming/node_projects/msd_messaging/client/src/components/DirectMessage.js\";\nimport React, { Component } from 'react';\nexport var DirectMessage =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(DirectMessage, _Component);\n\n  function DirectMessage() {\n    var _this;\n\n    _classCallCheck(this, DirectMessage);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DirectMessage).call(this)); // Hash dates to display above first message of day to show date is displayed\n\n    _this.scrollToBottom = function () {\n      _this.messagesEnd.scrollIntoView({\n        behavior: \"smooth\"\n      });\n    };\n\n    _this.first_message_dates = {};\n    _this.state = {\n      // Message to send\n      new_message: \"\",\n      // List of Messages\n      direct_messages: [],\n      messages: [{\n        sender_username: \"deepakabs\",\n        sentAt: \"Wed Nov 20, 2018 at 11\",\n        message: \"1\"\n      }, {\n        sender_username: \"deepakabs\",\n        senderName: \"Deepak ABS\",\n        profile_img_url: \"abs\",\n        sentAt: \"Wed Nov 20, 2018 at 11\",\n        message: \"2\"\n      }, {\n        sender_username: \"deepakabs\",\n        senderName: \"Deepak ABS\",\n        profile_img_url: \"abs\",\n        sentAt: \"Wed Nov 20, 2018 at 11\",\n        message: \"3\"\n      }, {\n        sender_username: \"deepakabs\",\n        senderName: \"Deepak ABS\",\n        profile_img_url: \"abs\",\n        sentAt: \"Wed Nov 20, 2018 at 11\",\n        message: \"4\"\n      }] // Bind to class         \n\n    };\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.send_direct_message = _this.send_direct_message.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.update_first_message_date = _this.update_first_message_date.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n  /* @name:  \tupdate_first_message_date()\n  @descr: Show first message with date \n  */\n\n\n  _createClass(DirectMessage, [{\n    key: \"update_first_message_date\",\n    value: function update_first_message_date(date_str, id) {\n      this.first_message_dates[date_str] = id;\n    }\n    /* @name:  \tcomponentDidMount()\n    @descr: fetch messages between selected user and current user\n    */\n\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // Show loading \n      this.scrollToBottom();\n      this.setState({\n        fetching_direct_messages: true\n      }); // Collect Messages\n\n      this.getDirectMessages(this.props.current_user.username, this.props.selected_user.username);\n    }\n    /*\n    \t@name:getDirectMessages\n    \t@descr: Make GET request to getDirectMessages\n    */\n\n  }, {\n    key: \"getDirectMessages\",\n    value: function getDirectMessages(username1, username2) {\n      var _this2 = this;\n\n      var api = \"/api/getDirectMessages?username1=\" + username1 + \"&username2=\" + username2;\n      return fetch(api).then(function (response) {\n        return response.json();\n      }).then(function (direct_messages) {\n        // 2. Update firstMessageDay hash\n        direct_messages = direct_messages.map(function (dm) {\n          var date = new Date(dm.createdAt);\n          if (!_this2.first_message_dates[date.toDateString()]) _this2.first_message_dates[date.toDateString()] = dm.id;\n          dm.sent = true;\n          return dm;\n        }); // 3.Update state\n\n        _this2.setState({\n          direct_messages: direct_messages,\n          fetching_direct_messages: false\n        });\n      });\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.current_user && prevProps.selected_user && this.props.selected_user && this.props.current_user) {\n        if (this.props.current_user.username || this.props.selected_user.username) {\n          // Collect Messages\n          this.getDirectMessages(this.props.current_user.username, this.props.selected_user.username);\n        }\n      }\n\n      this.scrollToBottom();\n    }\n    /* @name: send_direct_message \n       @descr: Send the message to the db and update the status\n    */\n\n  }, {\n    key: \"send_direct_message\",\n    value: function send_direct_message(event) {\n      var _this3 = this;\n\n      event.preventDefault();\n      console.log(\"Nemam Amma Bhagavan Sharanam -- send_direct_message\", this.props.selected_user.username); // 1. Create message object\n\n      var date = new Date();\n      var date_str = date.toDateString();\n      var message = this.state.new_message;\n      message = message.trim();\n      var direct_message = {};\n\n      if (message) {\n        var timestamp = date.getTime();\n        direct_message = {\n          message: message,\n          sender_username: this.props.current_user.username,\n          id: timestamp + \"_\" + this.props.current_user.username,\n          receiver_username: this.props.selected_user.username,\n          // Boolean indicating if message is sent\n          sent: false,\n          read: false,\n          // Display date for the first message in a day\n          display_date: !(date_str in this.first_message_dates) ? true : false,\n          date_string: date_str\n        }; // Update sent_dates_list\n\n        if (direct_message.display_date) this.first_message_dates[date_str] = false;\n        this.setState({\n          direct_messages: _toConsumableArray(this.state.direct_messages).concat([direct_message])\n        });\n        fetch(\"/api/sendDirectMessage\", {\n          method: 'POST',\n          // or 'PUT'\n          body: JSON.stringify({\n            direct_message: direct_message\n          }),\n          headers: {\n            \"Content-Type\": \"application/json\"\n          }\n        }).then(function (response) {\n          return response.json();\n        }).then(function (data) {\n          console.log(\"Nemam Amma Bhagavan Sharanam -- sent data\", data); // If message is delivered\n\n          if (data.sent) {\n            // Update message with status\n            _this3.setState({\n              direct_messages: _this3.state.direct_messages.map(function (el) {\n                return el.id === data.id ? Object.assign({}, el, {\n                  sent: true,\n                  createdAt: data.createdAt\n                }) : el;\n              })\n            });\n          }\n        }) // Don't modify the messages\n        .catch(function (err) {});\n        console.log(\"Nemam Amma Bhagavan Sharanam -- message\", direct_message); // Save the new message in database\n        // Update sent status \n      }\n    }\n    /* @name: handleChange: \n       @descr: Update text field when user modifies it\n    */\n\n  }, {\n    key: \"handleChange\",\n    value: function handleChange(event) {\n      event.preventDefault();\n      this.setState({\n        new_message: event.target.value\n      });\n    } // Scroll to bottom\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      return React.createElement(React.Fragment, {\n        key: this.props.current_user,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"direct-message-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207\n        },\n        __self: this\n      }, \" Send Message To  \", this.props.selected_user.name, \" \")), React.createElement(\"div\", {\n        className: \"direct-message-history-wrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"direct-message-history\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211\n        },\n        __self: this\n      }, this.state.direct_messages.map(function (message) {\n        return React.createElement(Message, {\n          message: message,\n          current_user: _this4.props.current_user,\n          selected_user: _this4.props.selected_user,\n          update_first_message_date: _this4.update_first_message_date,\n          first_message_dates: _this4.first_message_dates,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 214\n          },\n          __self: this\n        }, \" \");\n      }), React.createElement(\"div\", {\n        style: {\n          float: \"left\",\n          clear: \"both\"\n        },\n        ref: function ref(el) {\n          _this4.messagesEnd = el;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216\n        },\n        __self: this\n      })), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221\n        },\n        __self: this\n      }), React.createElement(\"form\", {\n        onSubmit: this.send_direct_message,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225\n        },\n        __self: this\n      }, React.createElement(\"textarea\", {\n        className: \"send-message-textarea\",\n        value: this.state.new_message,\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227\n        },\n        __self: this\n      })), React.createElement(\"input\", {\n        type: \"submit\",\n        value: \"Send\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 229\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return DirectMessage;\n}(Component);\n\nvar Message =\n/*#__PURE__*/\nfunction (_Component2) {\n  _inherits(Message, _Component2);\n\n  function Message() {\n    _classCallCheck(this, Message);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Message).call(this));\n  }\n\n  _createClass(Message, [{\n    key: \"render\",\n    value: function render() {\n      // Sending / Sent / Seen\n      var status = \"\"; // If message is first\n\n      var firstMessageDate; // If message is sent\n\n      if (!this.props.message.sent) {\n        status = React.createElement(\"span\", {\n          style: {\n            color: '#423',\n            float: 'right',\n            'font-size': '10px'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 252\n          },\n          __self: this\n        }, \" Sending... \");\n      } // If message is sent but unread\n      else if (this.props.message.sent && !this.props.message.read) {\n          // Convert Date to hours minutes\n          var date = new Date(this.props.message.createdAt);\n          date = date.toLocaleTimeString(navigator.language, {\n            hour: '2-digit',\n            minute: '2-digit'\n          });\n          status = React.createElement(\"span\", {\n            style: {\n              color: '#723',\n              float: 'right',\n              'font-size': '10px'\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 262\n            },\n            __self: this\n          }, \" Sent at \", date, \" \");\n        } else if (this.props.message.sent && this.props.message.read) {\n          status = React.createElement(\"span\", {\n            style: {\n              color: '#9AF',\n              float: 'right',\n              'font-size': '10px'\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 266\n            },\n            __self: this\n          }, \" Seen at \", this.props.message.updatedAt, \" \");\n        } // Display Date for First Message of Day\n\n\n      var date_str = this.props.message.date_string ? this.props.message.date_string : new Date(this.props.message.createdAt).toDateString(navigator.language);\n\n      if (this.props.message.display_date && this.props.first_message_dates[date_str] == false && !this.props.message.sent) {\n        firstMessageDate = React.createElement(\"div\", {\n          style: {\n            \"text-align\": 'center',\n            'font-size': '15px'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 273\n          },\n          __self: this\n        }, \" \", date_str, \" \");\n        this.props.update_first_message_date(date_str, this.props.message.id);\n      }\n\n      if (this.props.message.sent && this.props.first_message_dates[date_str] == this.props.message.id) {\n        firstMessageDate = React.createElement(\"div\", {\n          style: {\n            \"text-align\": 'center',\n            'font-size': '15px'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 279\n          },\n          __self: this\n        }, \" \", date_str, \" \");\n      }\n\n      if (this.props.current_user.username == this.props.message.sender_username) {\n        return (// If message is sent by user style it differently\n          React.createElement(React.Fragment, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 286\n            },\n            __self: this\n          }, firstMessageDate, React.createElement(\"br\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 288\n            },\n            __self: this\n          }), React.createElement(\"ul\", {\n            className: \"sent-message-ul\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 289\n            },\n            __self: this\n          }, React.createElement(\"li\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 290\n            },\n            __self: this\n          }, this.props.current_user.profile_image_url, React.createElement(\"br\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 292\n            },\n            __self: this\n          }), \"You\"), React.createElement(\"li\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 295\n            },\n            __self: this\n          }, React.createElement(\"span\", {\n            className: \"sent-message\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 296\n            },\n            __self: this\n          }, this.props.message.message), React.createElement(\"br\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 299\n            },\n            __self: this\n          }), React.createElement(\"br\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 300\n            },\n            __self: this\n          }), status)))\n        );\n      }\n\n      if (this.props.selected_user.username == this.props.message.sender_username) {\n        return (// If message is sent by user style it differently\n          React.createElement(React.Fragment, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 315\n            },\n            __self: this\n          }, firstMessageDate, React.createElement(\"br\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 317\n            },\n            __self: this\n          }), React.createElement(\"ul\", {\n            className: \"received-message-ul\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 318\n            },\n            __self: this\n          }, React.createElement(\"li\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 319\n            },\n            __self: this\n          }, this.props.selected_user.profile_image_url, React.createElement(\"br\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 321\n            },\n            __self: this\n          }), this.props.selected_user.name), React.createElement(\"li\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 324\n            },\n            __self: this\n          }, React.createElement(\"span\", {\n            className: \"sent-message\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 325\n            },\n            __self: this\n          }, this.props.message.message), React.createElement(\"br\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 328\n            },\n            __self: this\n          }), React.createElement(\"br\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 329\n            },\n            __self: this\n          }), status)))\n        );\n      }\n    }\n  }]);\n\n  return Message;\n}(Component);","map":{"version":3,"sources":["/Users/deepakabs/programming/node_projects/msd_messaging/client/src/components/DirectMessage.js"],"names":["React","Component","DirectMessage","scrollToBottom","messagesEnd","scrollIntoView","behavior","first_message_dates","state","new_message","direct_messages","messages","sender_username","sentAt","message","senderName","profile_img_url","handleChange","bind","send_direct_message","update_first_message_date","date_str","id","setState","fetching_direct_messages","getDirectMessages","props","current_user","username","selected_user","username1","username2","api","fetch","then","response","json","map","dm","date","Date","createdAt","toDateString","sent","prevProps","event","preventDefault","console","log","trim","direct_message","timestamp","getTime","receiver_username","read","display_date","date_string","method","body","JSON","stringify","headers","data","el","Object","assign","catch","err","target","value","name","float","clear","Message","status","firstMessageDate","color","toLocaleTimeString","navigator","language","hour","minute","updatedAt","profile_image_url"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nexport class DirectMessage extends Component {\n\t constructor() {\n        super();\n\n        // Hash dates to display above first message of day to show date is displayed\n       this.first_message_dates = {};\n       \n\n       this.state = {\n       \t// Message to send\n       \tnew_message: \"\",\n\n       \t// List of Messages\n      \tdirect_messages: [],\n      \tmessages: [{sender_username: \t\t\"deepakabs\",\n      \t\t\t\tsentAt: \t\t\"Wed Nov 20, 2018 at 11\",\n      \t\t\t\tmessage: \t\t\"1\"\n      \t\t\t  }, \n      \t\t\t  {sender_username: \t\t    \"deepakabs\",\n      \t\t\t\tsenderName:\t\t\"Deepak ABS\",\n      \t\t\t\tprofile_img_url: \"abs\",\n      \t\t\t\tsentAt: \t\t\"Wed Nov 20, 2018 at 11\",\n      \t\t\t\tmessage: \t\t\"2\"\n      \t\t\t  }\n      \t\t\t  ,\n      \t\t\t  {sender_username: \t\t\"deepakabs\",\n      \t\t\t\tsenderName:\t\t\"Deepak ABS\",\n      \t\t\t\tprofile_img_url: \"abs\",\n      \t\t\t\tsentAt: \t\t\"Wed Nov 20, 2018 at 11\",\n      \t\t\t\tmessage: \t\t\"3\"\n      \t\t\t  }, \n      \t\t\t  {sender_username: \t\t    \"deepakabs\",\n      \t\t\t\tsenderName:\t\t\"Deepak ABS\",\n      \t\t\t\tprofile_img_url: \"abs\",\n      \t\t\t\tsentAt: \t\t\"Wed Nov 20, 2018 at 11\",\n      \t\t\t\tmessage: \t\t\"4\"\n      \t\t\t  }]\n      }\t\t  \n        \n        // Bind to class         \n        this.handleChange = this.handleChange.bind(this);\n    \tthis.send_direct_message = this.send_direct_message.bind(this);       \t\n    \tthis.update_first_message_date = this.update_first_message_date.bind(this);\n    }\n\n    /* @name:  \tupdate_first_message_date()\n\t\t@descr: Show first message with date \n    */\n  update_first_message_date(date_str, id) {\n   \tthis.first_message_dates[date_str] = id;\n\n  }\n    /* @name:  \tcomponentDidMount()\n\t\t@descr: fetch messages between selected user and current user\n    */\n   componentDidMount() {\n      // Show loading \n      this.scrollToBottom();\n\n      this.setState({fetching_direct_messages: true});\n\n      // Collect Messages\n      this.getDirectMessages(this.props.current_user.username, this.props.selected_user.username)\n      \n\n    } \n\n    /*\n    \t@name:getDirectMessages\n    \t@descr: Make GET request to getDirectMessages\n    */\n  \tgetDirectMessages(username1, username2) {\n\t\t  let api = \"/api/getDirectMessages?username1=\"  + username1 + \"&username2=\" + username2;\n\n\t\t  return fetch(api)\n\t\t  .then(response =>  response.json())\n\t\t  .then((direct_messages) => {\n\n\n      \t\t// 2. Update firstMessageDay hash\n      \t\tdirect_messages = direct_messages.map((dm) => {\n      \t\t\tlet date = new Date(dm.createdAt);\t\n      \t\t\tif (!this.first_message_dates[date.toDateString()])\n      \t\t\t\tthis.first_message_dates[date.toDateString()] = dm.id;\n      \t\t\tdm.sent = true;\n      \t\t\treturn dm;\n      \t\t});\n\n      \t\t// 3.Update state\n\t        this.setState({\n\t            direct_messages:        direct_messages,\n\t            fetching_direct_messages: false\n\t        })\n        \n      })\n\n  \t}\n\n  \tcomponentDidUpdate(prevProps) {\n\t\tif (prevProps.current_user && prevProps.selected_user\n\t\t\t&& this.props.selected_user && this.props.current_user) {\n\t\t\tif ((this.props.current_user.username) || \n\t\t\t\t (this.props.selected_user.username))\n\t\t\t{\n\t\t\t\t // Collect Messages\n\t\t\t     this.getDirectMessages(this.props.current_user.username, this.props.selected_user.username)\n\t\t\t     \n\t\t\t}\n\t\t}\n\t  this.scrollToBottom();\n\t}\n    /* @name: send_direct_message \n       @descr: Send the message to the db and update the status\n    */ \n   send_direct_message(event) {\n   \t\tevent.preventDefault();\n   \t\tconsole.log(\"Nemam Amma Bhagavan Sharanam -- send_direct_message\", this.props.selected_user.username);\n    \t// 1. Create message object\n    \tvar date \t\t= new Date();\n    \tvar\tdate_str \t= date.toDateString();\n    \tvar message \t= this.state.new_message;\n        message = message.trim();\n        var direct_message = {};\n    \tif (message) {\n    \t\n    \t \tvar timestamp \t= date.getTime();\n     \t\t  \tdirect_message = {\n                            message:  message,\n                            sender_username:   this.props.current_user.username,\n                            id:       timestamp + \"_\" + this.props.current_user.username,   \n                            receiver_username: this.props.selected_user.username,\n\n                            // Boolean indicating if message is sent\n                            sent:   false,\n                           \tread: \tfalse,\n                            // Display date for the first message in a day\n                            display_date: !(date_str in this.first_message_dates) ? true : false,\n                            date_string:  date_str\n      \t\t};\n\n      \t\t// Update sent_dates_list\n      \t\tif (direct_message.display_date) this.first_message_dates[date_str] = false;\n\n      \t\tthis.setState({\n\t    \t\tdirect_messages: [...this.state.direct_messages, direct_message]\n\t    \t});\n\n      \t\tfetch(\"/api/sendDirectMessage\", {\n\t\t\t  method: 'POST', // or 'PUT'\n\t\t\t  body: JSON.stringify({direct_message: direct_message}),\n\t\t\t  headers: {\n                \"Content-Type\": \"application/json\"\n            \t}\n\t\t\t})\n\t\t\t.then((response) =>response.json())\n\t\t\t.then((data) => {\n\n\t\t\t\tconsole.log(\"Nemam Amma Bhagavan Sharanam -- sent data\", data);\n\t\t\t\t// If message is delivered\n\t\t\t\tif (data.sent) {\n\t\t\t\t\t// Update message with status\n\t\t\t\t\t this.setState({\n\t\t\t\t\t      direct_messages: this.state.direct_messages.map((el) => (el.id === data.id) ?\n\t\t\t\t\t      \t\t\t\t\t\t\t\t\t\t\t\t\t\t  Object.assign({}, el, {\n\t\t\t\t\t      \t\t\t\t\t\t\t\t\t\t\t\t\t\t  \tsent: true,\n\t\t\t\t\t      \t\t\t\t\t\t\t\t\t\t\t\t\t\t  \tcreatedAt: data.createdAt\n\t\t\t\t\t      \t\t\t\t\t\t\t\t\t\t\t\t\t\t  })\n\t\t\t\t\t      \t\t\t\t\t\t\t\t\t\t\t\t\t\t  : el)\n\t\t\t\t\t    });\t\n\n\t\t\t\t}\n\t\t\t})\n\t\t\t// Don't modify the messages\n\t\t\t.catch((err) => {\n\n\t\t\t})\n      \t\tconsole.log(\"Nemam Amma Bhagavan Sharanam -- message\", direct_message);\n\t    \t\n\t    \t// Save the new message in database\n      \t\t\n      \t\t// Update sent status \n  \t\t}\n\n\n  }\n\n   /* @name: handleChange: \n      @descr: Update text field when user modifies it\n \t*/\n \thandleChange(event) {\n \t event.preventDefault();\n   \t this.setState({new_message: event.target.value});\n  \t}\t\n    // Scroll to bottom\n    scrollToBottom = () => {\n\t  this.messagesEnd.scrollIntoView({ behavior: \"smooth\" });\n\t}\n\n\t\n\trender() {\n\n\t\treturn (\n\t\t\t<React.Fragment key={this.props.current_user}>\n\n\t\t\t<div className=\"direct-message-header\">\n\t\t\t\t\t<span> Send Message To  {this.props.selected_user.name} </span>\n\t\t\t</div>\n\t\t\t<div className=\"direct-message-history-wrapper\">\n\n\t\t\t\t<div className=\"direct-message-history\">\n\t\t\n\t\t\t \t   {this.state.direct_messages.map((message) => \n\t\t\t \t\t \t<Message message = {message} current_user = {this.props.current_user}  selected_user = {this.props.selected_user} update_first_message_date={this.update_first_message_date} first_message_dates={this.first_message_dates} > </Message>\n\t\t\t \t\t)}\n\t\t\t \t\t <div style={{ float:\"left\", clear: \"both\" }}\n\t\t\t             ref={(el) => { this.messagesEnd = el; }}>\n\t\t\t       \t </div>\n\t\t\t\t</div>\n\n\t\t\t\t<hr/>\n\n\n\t\t\t\t <form onSubmit={this.send_direct_message}>\n\t\t\t        <label>\n\n\t\t\t          <textarea className=\"send-message-textarea\" value={this.state.new_message} onChange={this.handleChange} />\n\t\t\t        </label>\n\t\t\t        <input type=\"submit\" value=\"Send\" />\n\t\t\t      </form>\n\t\t\t</div>\n\t\t\t</React.Fragment>\n\n\t\t)\n\t}\n}\n\nclass Message extends Component {\n\t\t\n\tconstructor() {\n\t\tsuper();\n\t}\n\trender() {\n\t\t// Sending / Sent / Seen\n\t\tlet status = \"\";\n\t\n\t\t// If message is first\n\t\tvar firstMessageDate;\n\n\t\t// If message is sent\n\t\tif (!this.props.message.sent){\n\t\t\tstatus = <span style={{color: '#423', float:'right', 'font-size':'10px'}}> Sending... </span>\n\t\t}\n\t\t\n\t\t// If message is sent but unread\n\t\telse if(this.props.message.sent && !this.props.message.read) {\n\t\t\t\n\t\t\t// Convert Date to hours minutes\n\t\t\tlet date = new Date(this.props.message.createdAt);\n\t\t\t\tdate = date.toLocaleTimeString(navigator.language, {hour: '2-digit', minute:'2-digit'});\n\t\t\t\n\t\t\tstatus = <span style={{color: '#723', float:'right', 'font-size':'10px'}}> Sent at {date} </span>\n\t\t}\n\n\t\telse if(this.props.message.sent && this.props.message.read) {\n\t\t\tstatus = <span style={{color: '#9AF', float:'right', 'font-size':'10px'}}> Seen at {this.props.message.updatedAt} </span>\n\t\t}\n\n\t\t// Display Date for First Message of Day\n\t\tlet date_str = this.props.message.date_string ? this.props.message.date_string : new Date(this.props.message.createdAt).toDateString(navigator.language);\n\n\t\tif (this.props.message.display_date && this.props.first_message_dates[date_str] == false && !this.props.message.sent) {\n\t\t\tfirstMessageDate =   <div style={{\"text-align\": 'center', 'font-size':'15px'}}> {date_str} </div>;\n\n\t\t\tthis.props.update_first_message_date(date_str, this.props.message.id);\n\t\t}\n\t\tif (this.props.message.sent && this.props.first_message_dates[date_str] ==  this.props.message.id) {\n\n\t\t\tfirstMessageDate = <div style={{\"text-align\": 'center', 'font-size':'15px'}}> {date_str} </div>;\n\t\t}\n\n\t \tif (this.props.current_user.username == this.props.message.sender_username) {\n\n\t\treturn (\n\t\t\t\t// If message is sent by user style it differently\n\t\t\t\t<React.Fragment>\n\t\t\t\t{firstMessageDate}\n\t\t\t\t<br/>\n\t\t\t\t<ul className=\"sent-message-ul\">\n\t\t\t\t\t<li>\n\t\t\t\t\t\t{this.props.current_user.profile_image_url}\n\t\t\t\t\t\t<br/>\n\t\t\t\t\t\tYou\n\t\t\t\t\t</li>\n\t\t\t\t\t<li> \n\t\t\t\t\t\t<span className=\"sent-message\">\n\t\t\t\t\t\t\t{this.props.message.message}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t\t<br/>\n\t\t\t\t\t\t<br/>\n\n\t\t\t\t\t\t{status}\n\t\t\t\t\t</li>\n\t\t\t\t\n\t\t\t\t</ul>\t\t\n\t\t\t\t</React.Fragment>\n\t\t\t\t\n\t \t\t)\n\t\t}\n\n\t\tif (this.props.selected_user.username == this.props.message.sender_username) {\n\n\t\treturn (\n\t\t\t\t// If message is sent by user style it differently\n\t\t\t\t<React.Fragment>\n\t\t\t\t{firstMessageDate}\n\t\t\t\t<br/>\n\t\t\t\t<ul className=\"received-message-ul\">\n\t\t\t\t\t<li>\n\t\t\t\t\t\t{this.props.selected_user.profile_image_url}\n\t\t\t\t\t\t<br/>\n\t\t\t\t\t\t{this.props.selected_user.name}\n\t\t\t\t\t</li>\n\t\t\t\t\t<li> \n\t\t\t\t\t\t<span className=\"sent-message\">\n\t\t\t\t\t\t\t{this.props.message.message}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t\t<br/>\n\t\t\t\t\t\t<br/>\n\n\t\t\t\t\t\t{status}\n\t\t\t\t\t</li>\n\t\t\t\t\n\t\t\t\t</ul>\t\t\n\t\t\t\t</React.Fragment>\n\t\t\t\t\n\t \t\t)\n\t\t}\n\t\n\t}\t\n}\n\n\n\n"]},"metadata":{},"sourceType":"module"}