{"ast":null,"code":"import _classCallCheck from \"/Users/deepakabs/programming/node_projects/msd_messaging/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/deepakabs/programming/node_projects/msd_messaging/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/deepakabs/programming/node_projects/msd_messaging/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/deepakabs/programming/node_projects/msd_messaging/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/deepakabs/programming/node_projects/msd_messaging/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/deepakabs/programming/node_projects/msd_messaging/client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/deepakabs/programming/node_projects/msd_messaging/client/src/components/DirectMessage.js\";\nimport React, { Component } from 'react';\nexport var DirectMessage =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(DirectMessage, _Component);\n\n  function DirectMessage() {\n    var _this;\n\n    _classCallCheck(this, DirectMessage);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DirectMessage).call(this)); // Array to show date is displayed\n\n    _this.send_direct_message = function (event) {\n      event.preventDefault();\n      console.log(\"Nemam Amma Bhagavan Sharanam -- send_direct_message\"); // 1. Create message object\n\n      var date = new Date();\n      date = date.toDateString();\n      var message = _this.state.new_message;\n      message = message.trim();\n\n      if (message) {\n        var timestamp = date.getTime();\n        var direct_message = {\n          message: message,\n          sender: _this.props.sender,\n          receiver: _this.props.receiver,\n          id: timestamp + \"_\" + _this.props.sender,\n          // Boolean indicating if message is sent\n          sent: false,\n          // sentAt timestamp converted to hours and minutes\n          sentAt: \"\",\n          // Display date for the first message in a day\n          display_date: _this.sent_dates_list.indexOf(date) ? false : true,\n          date_string: date\n        }; // Update sent_dates_list\n\n        if (direct_message.display_date) _this.sent_dates_list.push(date);\n        console.log(\"Nemam Amma Bhagavan Sharanam -- message\"); // e.preventDefault();\n\n        _this.setState({\n          messages: _this.messages.unshift(direct_message)\n        }); // Save the new message in database\n        // Update sent status \n\n      }\n    };\n\n    _this.scrollToBottom = function () {\n      _this.messagesEnd.scrollIntoView({\n        behavior: \"smooth\"\n      });\n    };\n\n    _this.sent_dates_list = [];\n    _this.state = {\n      // Message to send\n      new_message: \"\",\n      // List of Messages\n      messages: [{\n        sender: \"deepakabs\",\n        senderName: \"Deepak ABS\",\n        profile_img_url: \"abs\",\n        sentAt: \"Wed Nov 20, 2018 at 11\",\n        message: \"1\"\n      }, {\n        sender: \"deepakabs\",\n        senderName: \"Deepak ABS\",\n        profile_img_url: \"abs\",\n        sentAt: \"Wed Nov 20, 2018 at 11\",\n        message: \"2\"\n      }, {\n        sender: \"deepakabs\",\n        senderName: \"Deepak ABS\",\n        profile_img_url: \"abs\",\n        sentAt: \"Wed Nov 20, 2018 at 11\",\n        message: \"3\"\n      }, {\n        sender: \"deepakabs\",\n        senderName: \"Deepak ABS\",\n        profile_img_url: \"abs\",\n        sentAt: \"Wed Nov 20, 2018 at 11\",\n        message: \"4\"\n      }] //          \n\n    };\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.send_direct_message = _this.send_direct_message.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n  /* @name: send_direct_message \n     @descr: Send the message to the db and update the status\n   */\n\n\n  _createClass(DirectMessage, [{\n    key: \"handleChange\",\n\n    /* @name: handleChange: \n       @descr: Update text field when user modifies it\n    */\n    value: function handleChange(event) {\n      event.preventDefault();\n      this.setState({\n        new_message: event.target.value\n      });\n    } // Scroll to bottom\n\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.scrollToBottom();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.scrollToBottom();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        className: \"direct-message-history-wrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"direct-message-history\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, this.state.messages.map(function (message) {\n        return React.createElement(Message, {\n          message: message,\n          sender: _this2.props.sender,\n          receiver: _this2.props.receiver,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 124\n          },\n          __self: this\n        }, \" \");\n      }), React.createElement(\"div\", {\n        style: {\n          float: \"left\",\n          clear: \"both\"\n        },\n        ref: function ref(el) {\n          _this2.messagesEnd = el;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      })), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }), React.createElement(\"form\", {\n        onSubmit: this.send_direct_message,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }, React.createElement(\"textarea\", {\n        className: \"send-message-textarea\",\n        value: this.state.new_message,\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      })), React.createElement(\"input\", {\n        type: \"submit\",\n        value: \"Send\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return DirectMessage;\n}(Component);\n\nvar Message =\n/*#__PURE__*/\nfunction (_Component2) {\n  _inherits(Message, _Component2);\n\n  function Message() {\n    _classCallCheck(this, Message);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Message).call(this));\n  }\n\n  _createClass(Message, [{\n    key: \"render\",\n    value: function render() {\n      var status = \"\"; // If message is sent\n\n      if (!this.props.message.sent) {\n        status = React.createElement(\"span\", {\n          style: {\n            color: '#423'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 154\n          },\n          __self: this\n        }, \" Sending... \");\n      } // If message is sent but unread\n      else if (this.props.message.sent && !this.props.message.read) {\n          status = React.createElement(\"span\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 159\n            },\n            __self: this\n          }, \" Sent at \", this.props.message.sentAt, \" \");\n        } else if (this.props.message.sent && this.props.message.read) {\n          status = React.createElement(\"span\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 163\n            },\n            __self: this\n          }, \" Seen at \", this.props.message.sentAt, \" \");\n        }\n\n      if (this.props.sender.username == this.props.message.sender) {\n        return (// If message is sent by user style it differently\n          React.createElement(React.Fragment, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 170\n            },\n            __self: this\n          }, React.createElement(\"ul\", {\n            className: \"sent-message-ul\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 171\n            },\n            __self: this\n          }, React.createElement(\"li\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 172\n            },\n            __self: this\n          }, this.props.sender.profile_image_url, React.createElement(\"br\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 174\n            },\n            __self: this\n          }), \"You\"), React.createElement(\"li\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 177\n            },\n            __self: this\n          }, React.createElement(\"span\", {\n            className: \"sent-message\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 178\n            },\n            __self: this\n          }, this.props.message.message), React.createElement(\"br\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 181\n            },\n            __self: this\n          }), React.createElement(\"br\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 182\n            },\n            __self: this\n          }), status)))\n        );\n      }\n    }\n  }]);\n\n  return Message;\n}(Component);","map":{"version":3,"sources":["/Users/deepakabs/programming/node_projects/msd_messaging/client/src/components/DirectMessage.js"],"names":["React","Component","DirectMessage","send_direct_message","event","preventDefault","console","log","date","Date","toDateString","message","state","new_message","trim","timestamp","getTime","direct_message","sender","props","receiver","id","sent","sentAt","display_date","sent_dates_list","indexOf","date_string","push","setState","messages","unshift","scrollToBottom","messagesEnd","scrollIntoView","behavior","senderName","profile_img_url","handleChange","bind","target","value","map","float","clear","el","Message","status","color","read","username","profile_image_url"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,WAAaC,aAAb;AAAA;AAAA;AAAA;;AACE,2BAAc;AAAA;;AAAA;;AACR,wFADQ,CAGR;;AAHQ,UAkDbC,mBAlDa,GAkDS,UAACC,KAAD,EAAW;AAC/BA,MAAAA,KAAK,CAACC,cAAN;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,qDAAZ,EAF+B,CAG/B;;AACA,UAAIC,IAAI,GAAK,IAAIC,IAAJ,EAAb;AACCD,MAAAA,IAAI,GAAKA,IAAI,CAACE,YAAL,EAAT;AACD,UAAIC,OAAO,GAAI,MAAKC,KAAL,CAAWC,WAA1B;AACGF,MAAAA,OAAO,GAAGA,OAAO,CAACG,IAAR,EAAV;;AAEH,UAAIH,OAAJ,EAAa;AAEX,YAAII,SAAS,GAAIP,IAAI,CAACQ,OAAL,EAAjB;AACC,YAAIC,cAAc,GAAG;AACDN,UAAAA,OAAO,EAAGA,OADT;AAEDO,UAAAA,MAAM,EAAI,MAAKC,KAAL,CAAWD,MAFpB;AAGDE,UAAAA,QAAQ,EAAE,MAAKD,KAAL,CAAWC,QAHpB;AAIDC,UAAAA,EAAE,EAAQN,SAAS,GAAG,GAAZ,GAAkB,MAAKI,KAAL,CAAWD,MAJtC;AAMD;AACAI,UAAAA,IAAI,EAAI,KAPP;AAQD;AACAC,UAAAA,MAAM,EAAE,EATP;AAWD;AACAC,UAAAA,YAAY,EAAE,MAAKC,eAAL,CAAqBC,OAArB,CAA6BlB,IAA7B,IAAqC,KAArC,GAA6C,IAZ1D;AAaDmB,UAAAA,WAAW,EAAGnB;AAbb,SAArB,CAHU,CAmBV;;AACA,YAAIS,cAAc,CAACO,YAAnB,EAAiC,MAAKC,eAAL,CAAqBG,IAArB,CAA0BpB,IAA1B;AAGjCF,QAAAA,OAAO,CAACC,GAAR,CAAY,yCAAZ,EAvBU,CAwBZ;;AACA,cAAKsB,QAAL,CAAc;AACZC,UAAAA,QAAQ,EAAE,MAAKA,QAAL,CAAcC,OAAd,CAAsBd,cAAtB;AADE,SAAd,EAzBY,CA6BZ;AAEE;;AACH;AACF,KA5Fa;;AAAA,UAsGZe,cAtGY,GAsGK,YAAM;AACxB,YAAKC,WAAL,CAAiBC,cAAjB,CAAgC;AAAEC,QAAAA,QAAQ,EAAE;AAAZ,OAAhC;AACD,KAxGc;;AAIT,UAAKV,eAAL,GAAuB,EAAvB;AAGA,UAAKb,KAAL,GAAa;AACZ;AACAC,MAAAA,WAAW,EAAE,EAFD;AAIZ;AACDiB,MAAAA,QAAQ,EAAE,CAAC;AAACZ,QAAAA,MAAM,EAAI,WAAX;AACRkB,QAAAA,UAAU,EAAG,YADL;AAERC,QAAAA,eAAe,EAAE,KAFT;AAGRd,QAAAA,MAAM,EAAI,wBAHF;AAIRZ,QAAAA,OAAO,EAAI;AAJH,OAAD,EAMN;AAACO,QAAAA,MAAM,EAAQ,WAAf;AACDkB,QAAAA,UAAU,EAAG,YADZ;AAEDC,QAAAA,eAAe,EAAE,KAFhB;AAGDd,QAAAA,MAAM,EAAI,wBAHT;AAIDZ,QAAAA,OAAO,EAAI;AAJV,OANM,EAaN;AAACO,QAAAA,MAAM,EAAI,WAAX;AACDkB,QAAAA,UAAU,EAAG,YADZ;AAEDC,QAAAA,eAAe,EAAE,KAFhB;AAGDd,QAAAA,MAAM,EAAI,wBAHT;AAIDZ,QAAAA,OAAO,EAAI;AAJV,OAbM,EAmBN;AAACO,QAAAA,MAAM,EAAQ,WAAf;AACDkB,QAAAA,UAAU,EAAG,YADZ;AAEDC,QAAAA,eAAe,EAAE,KAFhB;AAGDd,QAAAA,MAAM,EAAI,wBAHT;AAIDZ,QAAAA,OAAO,EAAI;AAJV,OAnBM,CALG,CAgCZ;;AAhCY,KAAb;AAiCC,UAAK2B,YAAL,GAAoB,MAAKA,YAAL,CAAkBC,IAAlB,uDAApB;AACH,UAAKpC,mBAAL,GAA2B,MAAKA,mBAAL,CAAyBoC,IAAzB,uDAA3B;AAzCW;AA2CX;AAGD;;;;;AA/CJ;AAAA;;AA+FG;;;AA/FH,iCAkGenC,KAlGf,EAkGsB;AACnBA,MAAAA,KAAK,CAACC,cAAN;AACE,WAAKwB,QAAL,CAAc;AAAChB,QAAAA,WAAW,EAAET,KAAK,CAACoC,MAAN,CAAaC;AAA3B,OAAd;AACD,KArGJ,CAsGI;;AAtGJ;AAAA;AAAA,wCA4GqB;AAClB,WAAKT,cAAL;AACD;AA9GF;AAAA;AAAA,yCAgHsB;AACnB,WAAKA,cAAL;AACD;AAlHF;AAAA;AAAA,6BAmHU;AAAA;;AAER,aACC;AAAK,QAAA,SAAS,EAAC,gCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA;AAAK,QAAA,SAAS,EAAC,wBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEK,KAAKpB,KAAL,CAAWkB,QAAX,CAAoBY,GAApB,CAAwB,UAAC/B,OAAD;AAAA,eAC3B,oBAAC,OAAD;AAAS,UAAA,OAAO,EAAIA,OAApB;AAA6B,UAAA,MAAM,EAAE,MAAI,CAACQ,KAAL,CAAWD,MAAhD;AAAyD,UAAA,QAAQ,EAAE,MAAI,CAACC,KAAL,CAAWC,QAA9E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAD2B;AAAA,OAAxB,CAFL,EAKG;AAAK,QAAA,KAAK,EAAE;AAAEuB,UAAAA,KAAK,EAAC,MAAR;AAAgBC,UAAAA,KAAK,EAAE;AAAvB,SAAZ;AACS,QAAA,GAAG,EAAE,aAACC,EAAD,EAAQ;AAAE,UAAA,MAAI,CAACZ,WAAL,GAAmBY,EAAnB;AAAwB,SADhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QALH,CADA,EAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAXA,EAYC;AAAM,QAAA,QAAQ,EAAE,KAAK1C,mBAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEE;AAAU,QAAA,SAAS,EAAC,uBAApB;AAA4C,QAAA,KAAK,EAAE,KAAKS,KAAL,CAAWC,WAA9D;AAA2E,QAAA,QAAQ,EAAE,KAAKyB,YAA1F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,CADN,EAKM;AAAO,QAAA,IAAI,EAAC,QAAZ;AAAqB,QAAA,KAAK,EAAC,MAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QALN,CAZD,CADD;AAsBA;AA3IF;;AAAA;AAAA,EAAmCrC,SAAnC;;IA8IM6C,O;;;;;AAEL,qBAAc;AAAA;;AAAA;AAEb;;;;6BACQ;AACR,UAAIC,MAAM,GAAG,EAAb,CADQ,CAGR;;AACA,UAAI,CAAC,KAAK5B,KAAL,CAAWR,OAAX,CAAmBW,IAAxB,EAA6B;AAC5ByB,QAAAA,MAAM,GAAG;AAAM,UAAA,KAAK,EAAE;AAACC,YAAAA,KAAK,EAAE;AAAR,WAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAT;AACA,OAFD,CAIA;AAJA,WAKK,IAAG,KAAK7B,KAAL,CAAWR,OAAX,CAAmBW,IAAnB,IAA2B,CAAC,KAAKH,KAAL,CAAWR,OAAX,CAAmBsC,IAAlD,EAAwD;AAC5DF,UAAAA,MAAM,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAgB,KAAK5B,KAAL,CAAWR,OAAX,CAAmBY,MAAnC,MAAT;AACA,SAFI,MAIA,IAAG,KAAKJ,KAAL,CAAWR,OAAX,CAAmBW,IAAnB,IAA2B,KAAKH,KAAL,CAAWR,OAAX,CAAmBsC,IAAjD,EAAuD;AAC3DF,UAAAA,MAAM,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAgB,KAAK5B,KAAL,CAAWR,OAAX,CAAmBY,MAAnC,MAAT;AACA;;AAEA,UAAI,KAAKJ,KAAL,CAAWD,MAAX,CAAkBgC,QAAlB,IAA8B,KAAK/B,KAAL,CAAWR,OAAX,CAAmBO,MAArD,EAA6D;AAE9D,eACE;AACA,8BAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACA;AAAI,YAAA,SAAS,EAAC,iBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACE,KAAKC,KAAL,CAAWD,MAAX,CAAkBiC,iBADpB,EAEC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFD,QADD,EAMC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACC;AAAM,YAAA,SAAS,EAAC,cAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACE,KAAKhC,KAAL,CAAWR,OAAX,CAAmBA,OADrB,CADD,EAIC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAJD,EAKC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YALD,EAOEoC,MAPF,CAND,CADA;AAFF;AAuBC;AAED;;;;EAjDoB9C,S","sourcesContent":["import React, { Component } from 'react';\nexport class DirectMessage extends Component {\n\t constructor() {\n        super();\n\n        // Array to show date is displayed\n       this.sent_dates_list = [];\n       \n\n       this.state = {\n       \t// Message to send\n       \tnew_message: \"\",\n\n       \t// List of Messages\n      \tmessages: [{sender: \t\t\"deepakabs\",\n      \t\t\t\tsenderName:\t\t\"Deepak ABS\",\n      \t\t\t\tprofile_img_url: \"abs\",\n      \t\t\t\tsentAt: \t\t\"Wed Nov 20, 2018 at 11\",\n      \t\t\t\tmessage: \t\t\"1\"\n      \t\t\t  }, \n      \t\t\t  {sender: \t\t    \"deepakabs\",\n      \t\t\t\tsenderName:\t\t\"Deepak ABS\",\n      \t\t\t\tprofile_img_url: \"abs\",\n      \t\t\t\tsentAt: \t\t\"Wed Nov 20, 2018 at 11\",\n      \t\t\t\tmessage: \t\t\"2\"\n      \t\t\t  }\n      \t\t\t  ,\n      \t\t\t  {sender: \t\t\"deepakabs\",\n      \t\t\t\tsenderName:\t\t\"Deepak ABS\",\n      \t\t\t\tprofile_img_url: \"abs\",\n      \t\t\t\tsentAt: \t\t\"Wed Nov 20, 2018 at 11\",\n      \t\t\t\tmessage: \t\t\"3\"\n      \t\t\t  }, \n      \t\t\t  {sender: \t\t    \"deepakabs\",\n      \t\t\t\tsenderName:\t\t\"Deepak ABS\",\n      \t\t\t\tprofile_img_url: \"abs\",\n      \t\t\t\tsentAt: \t\t\"Wed Nov 20, 2018 at 11\",\n      \t\t\t\tmessage: \t\t\"4\"\n      \t\t\t  }]\n      }\t\t  \n        \n        //          \n        this.handleChange = this.handleChange.bind(this);\n    \tthis.send_direct_message = this.send_direct_message.bind(this);       \t\n\n    }\n\n\n    /* @name: send_direct_message \n       @descr: Send the message to the db and update the status\n\n    */ \n   send_direct_message = (event) => {\n   \t\tevent.preventDefault();\n   \t\tconsole.log(\"Nemam Amma Bhagavan Sharanam -- send_direct_message\");\n    \t// 1. Create message object\n    \tvar date \t\t= new Date();\n    \t\tdate \t\t= date.toDateString();\n    \tvar message \t= this.state.new_message;\n        message = message.trim();\n\n    \tif (message) {\n    \t\n    \t \tvar timestamp \t= date.getTime();\n     \t\t var direct_message = {\n                            message:  message,\n                            sender:   this.props.sender,\n                            receiver: this.props.receiver,\n                            id:       timestamp + \"_\" + this.props.sender,   \n                            \n                            // Boolean indicating if message is sent\n                            sent:   false,\n                            // sentAt timestamp converted to hours and minutes\n                            sentAt: \"\",\n\n                            // Display date for the first message in a day\n                            display_date: this.sent_dates_list.indexOf(date) ? false : true,\n                            date_string:  date\n      \t\t};\n\n      \t\t// Update sent_dates_list\n      \t\tif (direct_message.display_date) this.sent_dates_list.push(date);\n\n\n      \t\tconsole.log(\"Nemam Amma Bhagavan Sharanam -- message\");\n\t    \t// e.preventDefault();\n\t    \tthis.setState({\n\t    \t  messages: this.messages.unshift(direct_message)\n\t    \t});\n\n\t    \t// Save the new message in database\n      \t\t\n      \t\t// Update sent status \n  \t\t}\n  }\n\n   /* @name: handleChange: \n      @descr: Update text field when user modifies it\n \t*/\n \thandleChange(event) {\n \t event.preventDefault();\n   \t this.setState({new_message: event.target.value});\n  \t}\t\n    // Scroll to bottom\n    scrollToBottom = () => {\n\t  this.messagesEnd.scrollIntoView({ behavior: \"smooth\" });\n\t}\n\n\n\tcomponentDidMount() {\n\t  this.scrollToBottom();\n\t}\n\n\tcomponentDidUpdate() {\n\t  this.scrollToBottom();\n\t}\n\trender() {\n\n\t\treturn (\n\t\t\t<div className=\"direct-message-history-wrapper\">\n\t\t\t<div className=\"direct-message-history\">\n\t\t\n\t\t \t   {this.state.messages.map((message) => \n\t\t \t\t<Message message = {message} sender={this.props.sender}  receiver={this.props.receiver}> </Message>\n\t\t \t\t)}\n\t\t \t\t <div style={{ float:\"left\", clear: \"both\" }}\n\t\t             ref={(el) => { this.messagesEnd = el; }}>\n\t\t        </div>\n\t\t\t</div>\n\n\t\t\t<hr/>\n\t\t\t <form onSubmit={this.send_direct_message}>\n\t\t        <label>\n\n\t\t          <textarea className=\"send-message-textarea\" value={this.state.new_message} onChange={this.handleChange} />\n\t\t        </label>\n\t\t        <input type=\"submit\" value=\"Send\" />\n\t\t      </form>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nclass Message extends Component {\n\t\t\n\tconstructor() {\n\t\tsuper();\n\t}\n\trender() {\n\t\tlet status = \"\";\n\t\t\n\t\t// If message is sent\n\t\tif (!this.props.message.sent){\n\t\t\tstatus = <span style={{color: '#423'}}> Sending... </span>\n\t\t}\n\t\t\n\t\t// If message is sent but unread\n\t\telse if(this.props.message.sent && !this.props.message.read) {\n\t\t\tstatus = <span> Sent at {this.props.message.sentAt} </span>\n\t\t}\n\n\t\telse if(this.props.message.sent && this.props.message.read) {\n\t\t\tstatus = <span> Seen at {this.props.message.sentAt} </span>\n\t\t}\n\n\t \tif (this.props.sender.username == this.props.message.sender) {\n\n\t\treturn (\n\t\t\t\t// If message is sent by user style it differently\n\t\t\t\t<React.Fragment>\n\t\t\t\t<ul className=\"sent-message-ul\">\n\t\t\t\t\t<li>\n\t\t\t\t\t\t{this.props.sender.profile_image_url}\n\t\t\t\t\t\t<br/>\n\t\t\t\t\t\tYou\n\t\t\t\t\t</li>\n\t\t\t\t\t<li> \n\t\t\t\t\t\t<span className=\"sent-message\">\n\t\t\t\t\t\t\t{this.props.message.message}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t\t<br/>\n\t\t\t\t\t\t<br/>\n\n\t\t\t\t\t\t{status}\n\t\t\t\t\t</li>\n\t\t\t\t\n\t\t\t\t</ul>\t\t\n\t\t\t\t</React.Fragment>\n\t\t\t\t\n\t \t\t)\n\t\t}\n\t\n\t}\t\n}\n\n\n\n"]},"metadata":{},"sourceType":"module"}