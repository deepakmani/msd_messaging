{"ast":null,"code":"import _toConsumableArray from \"/Users/deepakabs/programming/node_projects/msd_messaging/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/deepakabs/programming/node_projects/msd_messaging/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/deepakabs/programming/node_projects/msd_messaging/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/deepakabs/programming/node_projects/msd_messaging/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/deepakabs/programming/node_projects/msd_messaging/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/deepakabs/programming/node_projects/msd_messaging/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/deepakabs/programming/node_projects/msd_messaging/client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/deepakabs/programming/node_projects/msd_messaging/client/src/components/DirectMessage.js\";\nimport React, { Component } from 'react';\nexport var DirectMessage =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(DirectMessage, _Component);\n\n  function DirectMessage() {\n    var _this;\n\n    _classCallCheck(this, DirectMessage);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DirectMessage).call(this)); // Array to show date is displayed\n\n    _this.scrollToBottom = function () {\n      _this.messagesEnd.scrollIntoView({\n        behavior: \"smooth\"\n      });\n    };\n\n    _this.sent_dates_list = [];\n    _this.state = {\n      // Message to send\n      new_message: \"\",\n      // List of Messages\n      messages: [{\n        sender: \"deepakabs\",\n        senderName: \"Deepak ABS\",\n        profile_img_url: \"abs\",\n        sentAt: \"Wed Nov 20, 2018 at 11\",\n        message: \"1\"\n      }, {\n        sender: \"deepakabs\",\n        senderName: \"Deepak ABS\",\n        profile_img_url: \"abs\",\n        sentAt: \"Wed Nov 20, 2018 at 11\",\n        message: \"2\"\n      }, {\n        sender: \"deepakabs\",\n        senderName: \"Deepak ABS\",\n        profile_img_url: \"abs\",\n        sentAt: \"Wed Nov 20, 2018 at 11\",\n        message: \"3\"\n      }, {\n        sender: \"deepakabs\",\n        senderName: \"Deepak ABS\",\n        profile_img_url: \"abs\",\n        sentAt: \"Wed Nov 20, 2018 at 11\",\n        message: \"4\"\n      }] //          \n\n    };\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.send_direct_message = _this.send_direct_message.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n  /* @name: send_direct_message \n     @descr: Send the message to the db and update the status\n   */\n\n\n  _createClass(DirectMessage, [{\n    key: \"send_direct_message\",\n    value: function send_direct_message(event) {\n      event.preventDefault();\n      console.log(\"Nemam Amma Bhagavan Sharanam -- send_direct_message\"); // 1. Create message object\n\n      var date = new Date();\n      var date_str = date.toDateString();\n      var message = this.state.new_message;\n      message = message.trim();\n      var direct_message = {};\n\n      if (message) {\n        var timestamp = date.getTime();\n        direct_message = {\n          message: message,\n          sender_username: this.props.sender.username,\n          receiver_username: this.props.receiver.username,\n          id: timestamp + \"_\" + this.props.sender,\n          // Boolean indicating if message is sent\n          sent: false,\n          // sentAt timestamp converted to hours and minutes\n          sentAt: \"\",\n          // Display date for the first message in a day\n          display_date: this.sent_dates_list.indexOf(date_str) ? false : true,\n          date_string: date_str\n        }; // Update sent_dates_list\n\n        if (direct_message.display_date) this.sent_dates_list.push(date);\n        console.log(\"Nemam Amma Bhagavan Sharanam -- message\", direct_message);\n        this.setState({\n          messages: _toConsumableArray(this.state.messages).concat([direct_message])\n        }); // Save the new message in database\n        // Update sent status \n      }\n    }\n    /* @name: handleChange: \n       @descr: Update text field when user modifies it\n    */\n\n  }, {\n    key: \"handleChange\",\n    value: function handleChange(event) {\n      event.preventDefault();\n      this.setState({\n        new_message: event.target.value\n      });\n    } // Scroll to bottom\n\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.scrollToBottom();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.scrollToBottom();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        className: \"direct-message-history-wrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"direct-message-history\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, this.state.messages.map(function (message) {\n        return React.createElement(Message, {\n          message: message,\n          sender: _this2.props.sender,\n          receiver: _this2.props.receiver,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 123\n          },\n          __self: this\n        }, \" \");\n      }), React.createElement(\"div\", {\n        style: {\n          float: \"left\",\n          clear: \"both\"\n        },\n        ref: function ref(el) {\n          _this2.messagesEnd = el;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      })), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }), React.createElement(\"form\", {\n        onSubmit: this.send_direct_message,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, React.createElement(\"textarea\", {\n        className: \"send-message-textarea\",\n        value: this.state.new_message,\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      })), React.createElement(\"input\", {\n        type: \"submit\",\n        value: \"Send\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return DirectMessage;\n}(Component);\n\nvar Message =\n/*#__PURE__*/\nfunction (_Component2) {\n  _inherits(Message, _Component2);\n\n  function Message() {\n    _classCallCheck(this, Message);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Message).call(this));\n  }\n\n  _createClass(Message, [{\n    key: \"render\",\n    value: function render() {\n      var status = \"\"; // If message is sent\n\n      if (!this.props.message.sent) {\n        status = React.createElement(\"span\", {\n          style: {\n            color: '#423'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 153\n          },\n          __self: this\n        }, \" Sending... \");\n      } // If message is sent but unread\n      else if (this.props.message.sent && !this.props.message.read) {\n          status = React.createElement(\"span\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 158\n            },\n            __self: this\n          }, \" Sent at \", this.props.message.sentAt, \" \");\n        } else if (this.props.message.sent && this.props.message.read) {\n          status = React.createElement(\"span\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 162\n            },\n            __self: this\n          }, \" Seen at \", this.props.message.sentAt, \" \");\n        }\n\n      if (this.props.sender.username == this.props.message.sender_username) {\n        return (// If message is sent by user style it differently\n          React.createElement(React.Fragment, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 169\n            },\n            __self: this\n          }, React.createElement(\"ul\", {\n            className: \"sent-message-ul\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 170\n            },\n            __self: this\n          }, React.createElement(\"li\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 171\n            },\n            __self: this\n          }, this.props.sender.profile_image_url, React.createElement(\"br\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 173\n            },\n            __self: this\n          }), \"You\"), React.createElement(\"li\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 176\n            },\n            __self: this\n          }, React.createElement(\"span\", {\n            className: \"sent-message\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 177\n            },\n            __self: this\n          }, this.props.message.message), React.createElement(\"br\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 180\n            },\n            __self: this\n          }), React.createElement(\"br\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 181\n            },\n            __self: this\n          }), status)))\n        );\n      }\n    }\n  }]);\n\n  return Message;\n}(Component);","map":{"version":3,"sources":["/Users/deepakabs/programming/node_projects/msd_messaging/client/src/components/DirectMessage.js"],"names":["React","Component","DirectMessage","scrollToBottom","messagesEnd","scrollIntoView","behavior","sent_dates_list","state","new_message","messages","sender","senderName","profile_img_url","sentAt","message","handleChange","bind","send_direct_message","event","preventDefault","console","log","date","Date","date_str","toDateString","trim","direct_message","timestamp","getTime","sender_username","props","username","receiver_username","receiver","id","sent","display_date","indexOf","date_string","push","setState","target","value","map","float","clear","el","Message","status","color","read","profile_image_url"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nexport class DirectMessage extends Component {\n\t constructor() {\n        super();\n\n        // Array to show date is displayed\n       this.sent_dates_list = [];\n       \n\n       this.state = {\n       \t// Message to send\n       \tnew_message: \"\",\n\n       \t// List of Messages\n      \tmessages: [{sender: \t\t\"deepakabs\",\n      \t\t\t\tsenderName:\t\t\"Deepak ABS\",\n      \t\t\t\tprofile_img_url: \"abs\",\n      \t\t\t\tsentAt: \t\t\"Wed Nov 20, 2018 at 11\",\n      \t\t\t\tmessage: \t\t\"1\"\n      \t\t\t  }, \n      \t\t\t  {sender: \t\t    \"deepakabs\",\n      \t\t\t\tsenderName:\t\t\"Deepak ABS\",\n      \t\t\t\tprofile_img_url: \"abs\",\n      \t\t\t\tsentAt: \t\t\"Wed Nov 20, 2018 at 11\",\n      \t\t\t\tmessage: \t\t\"2\"\n      \t\t\t  }\n      \t\t\t  ,\n      \t\t\t  {sender: \t\t\"deepakabs\",\n      \t\t\t\tsenderName:\t\t\"Deepak ABS\",\n      \t\t\t\tprofile_img_url: \"abs\",\n      \t\t\t\tsentAt: \t\t\"Wed Nov 20, 2018 at 11\",\n      \t\t\t\tmessage: \t\t\"3\"\n      \t\t\t  }, \n      \t\t\t  {sender: \t\t    \"deepakabs\",\n      \t\t\t\tsenderName:\t\t\"Deepak ABS\",\n      \t\t\t\tprofile_img_url: \"abs\",\n      \t\t\t\tsentAt: \t\t\"Wed Nov 20, 2018 at 11\",\n      \t\t\t\tmessage: \t\t\"4\"\n      \t\t\t  }]\n      }\t\t  \n        \n        //          \n        this.handleChange = this.handleChange.bind(this);\n    \tthis.send_direct_message = this.send_direct_message.bind(this);       \t\n\n    }\n\n\n    /* @name: send_direct_message \n       @descr: Send the message to the db and update the status\n\n    */ \n   send_direct_message(event) {\n   \t\tevent.preventDefault();\n   \t\tconsole.log(\"Nemam Amma Bhagavan Sharanam -- send_direct_message\");\n    \t// 1. Create message object\n    \tvar date \t\t= new Date();\n    \tvar\tdate_str \t= date.toDateString();\n    \tvar message \t= this.state.new_message;\n        message = message.trim();\n        var direct_message = {};\n    \tif (message) {\n    \t\n    \t \tvar timestamp \t= date.getTime();\n     \t\t  \tdirect_message = {\n                            message:  message,\n                            sender_username:   this.props.sender.username,\n                            receiver_username: this.props.receiver.username,\n                            id:       timestamp + \"_\" + this.props.sender,   \n                            \n                            // Boolean indicating if message is sent\n                            sent:   false,\n                            // sentAt timestamp converted to hours and minutes\n                            sentAt: \"\",\n\n                            // Display date for the first message in a day\n                            display_date: this.sent_dates_list.indexOf(date_str) ? false : true,\n                            date_string:  date_str\n      \t\t};\n\n      \t\t// Update sent_dates_list\n      \t\tif (direct_message.display_date) this.sent_dates_list.push(date);\n\n\n      \t\tconsole.log(\"Nemam Amma Bhagavan Sharanam -- message\", direct_message);\n\t    \tthis.setState({\n\t    \t\tmessages: [...this.state.messages, direct_message]\n\t    \t});\n\n\t    \t// Save the new message in database\n      \t\t\n      \t\t// Update sent status \n  \t\t}\n  }\n\n   /* @name: handleChange: \n      @descr: Update text field when user modifies it\n \t*/\n \thandleChange(event) {\n \t event.preventDefault();\n   \t this.setState({new_message: event.target.value});\n  \t}\t\n    // Scroll to bottom\n    scrollToBottom = () => {\n\t  this.messagesEnd.scrollIntoView({ behavior: \"smooth\" });\n\t}\n\n\n\tcomponentDidMount() {\n\t  this.scrollToBottom();\n\t}\n\n\tcomponentDidUpdate() {\n\t  this.scrollToBottom();\n\t}\n\trender() {\n\n\t\treturn (\n\t\t\t<div className=\"direct-message-history-wrapper\">\n\t\t\t<div className=\"direct-message-history\">\n\t\t\n\t\t \t   {this.state.messages.map((message) => \n\t\t \t\t \t<Message message = {message} sender={this.props.sender}  receiver={this.props.receiver}> </Message>\n\t\t \t\t)}\n\t\t \t\t <div style={{ float:\"left\", clear: \"both\" }}\n\t\t             ref={(el) => { this.messagesEnd = el; }}>\n\t\t        </div>\n\t\t\t</div>\n\n\t\t\t<hr/>\n\t\t\t <form onSubmit={this.send_direct_message}>\n\t\t        <label>\n\n\t\t          <textarea className=\"send-message-textarea\" value={this.state.new_message} onChange={this.handleChange} />\n\t\t        </label>\n\t\t        <input type=\"submit\" value=\"Send\" />\n\t\t      </form>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nclass Message extends Component {\n\t\t\n\tconstructor() {\n\t\tsuper();\n\t}\n\trender() {\n\t\tlet status = \"\";\n\t\t\n\t\t// If message is sent\n\t\tif (!this.props.message.sent){\n\t\t\tstatus = <span style={{color: '#423'}}> Sending... </span>\n\t\t}\n\t\t\n\t\t// If message is sent but unread\n\t\telse if(this.props.message.sent && !this.props.message.read) {\n\t\t\tstatus = <span> Sent at {this.props.message.sentAt} </span>\n\t\t}\n\n\t\telse if(this.props.message.sent && this.props.message.read) {\n\t\t\tstatus = <span> Seen at {this.props.message.sentAt} </span>\n\t\t}\n\n\t \tif (this.props.sender.username == this.props.message.sender_username) {\n\n\t\treturn (\n\t\t\t\t// If message is sent by user style it differently\n\t\t\t\t<React.Fragment>\n\t\t\t\t<ul className=\"sent-message-ul\">\n\t\t\t\t\t<li>\n\t\t\t\t\t\t{this.props.sender.profile_image_url}\n\t\t\t\t\t\t<br/>\n\t\t\t\t\t\tYou\n\t\t\t\t\t</li>\n\t\t\t\t\t<li> \n\t\t\t\t\t\t<span className=\"sent-message\">\n\t\t\t\t\t\t\t{this.props.message.message}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t\t<br/>\n\t\t\t\t\t\t<br/>\n\n\t\t\t\t\t\t{status}\n\t\t\t\t\t</li>\n\t\t\t\t\n\t\t\t\t</ul>\t\t\n\t\t\t\t</React.Fragment>\n\t\t\t\t\n\t \t\t)\n\t\t}\n\t\n\t}\t\n}\n\n\n\n"]},"metadata":{},"sourceType":"module"}