{"ast":null,"code":"import _toConsumableArray from \"/Users/deepakabs/programming/node_projects/msd_messaging/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/deepakabs/programming/node_projects/msd_messaging/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/deepakabs/programming/node_projects/msd_messaging/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/deepakabs/programming/node_projects/msd_messaging/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/deepakabs/programming/node_projects/msd_messaging/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/deepakabs/programming/node_projects/msd_messaging/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/deepakabs/programming/node_projects/msd_messaging/client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/deepakabs/programming/node_projects/msd_messaging/client/src/components/DirectMessage.js\";\nimport React, { Component } from 'react';\nexport var DirectMessage =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(DirectMessage, _Component);\n\n  function DirectMessage() {\n    var _this;\n\n    _classCallCheck(this, DirectMessage);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DirectMessage).call(this)); // Array to show date is displayed\n\n    _this.scrollToBottom = function () {\n      _this.messagesEnd.scrollIntoView({\n        behavior: \"smooth\"\n      });\n    };\n\n    _this.sent_dates_list = [];\n    _this.state = {\n      // Message to send\n      new_message: \"\",\n      // List of Messages\n      direct_messages: [],\n      messages: [{\n        sender_username: \"deepakabs\",\n        sentAt: \"Wed Nov 20, 2018 at 11\",\n        message: \"1\"\n      }, {\n        sender_username: \"deepakabs\",\n        senderName: \"Deepak ABS\",\n        profile_img_url: \"abs\",\n        sentAt: \"Wed Nov 20, 2018 at 11\",\n        message: \"2\"\n      }, {\n        sender_username: \"deepakabs\",\n        senderName: \"Deepak ABS\",\n        profile_img_url: \"abs\",\n        sentAt: \"Wed Nov 20, 2018 at 11\",\n        message: \"3\"\n      }, {\n        sender_username: \"deepakabs\",\n        senderName: \"Deepak ABS\",\n        profile_img_url: \"abs\",\n        sentAt: \"Wed Nov 20, 2018 at 11\",\n        message: \"4\"\n      }] //          \n\n    };\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.send_direct_message = _this.send_direct_message.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n  /* @name: send_direct_message \n     @descr: Send the message to the db and update the status\n  */\n\n\n  _createClass(DirectMessage, [{\n    key: \"send_direct_message\",\n    value: function send_direct_message(event) {\n      var _this2 = this;\n\n      event.preventDefault();\n      console.log(\"Nemam Amma Bhagavan Sharanam -- send_direct_message\"); // 1. Create message object\n\n      var date = new Date();\n      var date_str = date.toDateString();\n      var message = this.state.new_message;\n      message = message.trim();\n      var direct_message = {};\n\n      if (message) {\n        var timestamp = date.getTime();\n        direct_message = {\n          message: message,\n          sender_username: this.props.current_user.username,\n          receiver_username: this.props.selected_user.username,\n          id: timestamp + \"_\" + this.props.current_user.username,\n          // Boolean indicating if message is sent\n          sent: false,\n          read: false,\n          // Display date for the first message in a day\n          display_date: this.sent_dates_list.indexOf(date_str) ? false : true,\n          date_string: date_str\n        }; // Update sent_dates_list\n\n        if (direct_message.display_date) this.sent_dates_list.push(date);\n        this.setState({\n          direct_messages: _toConsumableArray(this.state.direct_messages).concat([direct_message])\n        });\n        fetch(\"/api/sendDirectMessage\", {\n          method: 'POST',\n          // or 'PUT'\n          body: direct_message\n        }).then(function (response) {\n          return response.json();\n        }).then(function (data) {\n          console.log(\"Nemam Amma Bhagavan Sharanam -- sent data\", data); // If message is delivered\n\n          if (data.sent) {\n            // Update message with status\n            _this2.setState({\n              direct_messages: _this2.state.direct_messages.map(function (el) {\n                return el.id === data.id ? Object.assign({}, el, {\n                  sent: true,\n                  createdAt: data.createdAt\n                }) : el;\n              })\n            });\n          }\n        }) // Don't modify the messages\n        .catch(function (err) {});\n        console.log(\"Nemam Amma Bhagavan Sharanam -- message\", direct_message); // Save the new message in database\n        // Update sent status \n      }\n    }\n    /* @name: handleChange: \n       @descr: Update text field when user modifies it\n    */\n\n  }, {\n    key: \"handleChange\",\n    value: function handleChange(event) {\n      event.preventDefault();\n      this.setState({\n        new_message: event.target.value\n      });\n    } // Scroll to bottom\n\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.scrollToBottom();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.scrollToBottom();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return React.createElement(\"div\", {\n        className: \"direct-message-history-wrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"direct-message-history\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }, this.state.direct_messages.map(function (message) {\n        return React.createElement(Message, {\n          message: message,\n          current_user: _this3.props.current_user,\n          selected_user: _this3.props.selected_member,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 146\n          },\n          __self: this\n        }, \" \");\n      }), React.createElement(\"div\", {\n        style: {\n          float: \"left\",\n          clear: \"both\"\n        },\n        ref: function ref(el) {\n          _this3.messagesEnd = el;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      })), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }), React.createElement(\"form\", {\n        onSubmit: this.send_direct_message,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }, React.createElement(\"textarea\", {\n        className: \"send-message-textarea\",\n        value: this.state.new_message,\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      })), React.createElement(\"input\", {\n        type: \"submit\",\n        value: \"Send\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return DirectMessage;\n}(Component);\n\nvar Message =\n/*#__PURE__*/\nfunction (_Component2) {\n  _inherits(Message, _Component2);\n\n  function Message() {\n    _classCallCheck(this, Message);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Message).call(this));\n  }\n\n  _createClass(Message, [{\n    key: \"render\",\n    value: function render() {\n      var status = \"\"; // If message is sent\n\n      if (!this.props.message.sent) {\n        status = React.createElement(\"span\", {\n          style: {\n            color: '#423',\n            float: 'right',\n            'font-size': '10px'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 176\n          },\n          __self: this\n        }, \" Sending... \");\n      } // If message is sent but unread\n      else if (this.props.message.sent && !this.props.message.read) {\n          status = React.createElement(\"span\", {\n            style: {\n              color: '#723',\n              float: 'right',\n              'font-size': '10px'\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 181\n            },\n            __self: this\n          }, \" Sent at \", this.props.message.createdAt, \" \");\n        } else if (this.props.message.sent && this.props.message.read) {\n          status = React.createElement(\"span\", {\n            style: {\n              color: '#9AF',\n              float: 'right',\n              'font-size': '10px'\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 185\n            },\n            __self: this\n          }, \" Seen at \", this.props.message.updatedAt, \" \");\n        }\n\n      if (this.props.current_user.username == this.props.message.sender_username) {\n        return (// If message is sent by user style it differently\n          React.createElement(React.Fragment, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 192\n            },\n            __self: this\n          }, React.createElement(\"ul\", {\n            className: \"sent-message-ul\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 193\n            },\n            __self: this\n          }, React.createElement(\"li\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 194\n            },\n            __self: this\n          }, this.props.current_user.profile_image_url, React.createElement(\"br\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 196\n            },\n            __self: this\n          }), \"You\"), React.createElement(\"li\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 199\n            },\n            __self: this\n          }, React.createElement(\"span\", {\n            className: \"sent-message\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 200\n            },\n            __self: this\n          }, this.props.message.message), React.createElement(\"br\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 203\n            },\n            __self: this\n          }), React.createElement(\"br\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 204\n            },\n            __self: this\n          }), status)))\n        );\n      }\n    }\n  }]);\n\n  return Message;\n}(Component);","map":{"version":3,"sources":["/Users/deepakabs/programming/node_projects/msd_messaging/client/src/components/DirectMessage.js"],"names":["React","Component","DirectMessage","scrollToBottom","messagesEnd","scrollIntoView","behavior","sent_dates_list","state","new_message","direct_messages","messages","sender_username","sentAt","message","senderName","profile_img_url","handleChange","bind","send_direct_message","event","preventDefault","console","log","date","Date","date_str","toDateString","trim","direct_message","timestamp","getTime","props","current_user","username","receiver_username","selected_user","id","sent","read","display_date","indexOf","date_string","push","setState","fetch","method","body","then","response","json","data","map","el","Object","assign","createdAt","catch","err","target","value","selected_member","float","clear","Message","status","color","updatedAt","profile_image_url"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nexport class DirectMessage extends Component {\n\t constructor() {\n        super();\n\n        // Array to show date is displayed\n       this.sent_dates_list = [];\n       \n\n       this.state = {\n       \t// Message to send\n       \tnew_message: \"\",\n\n       \t// List of Messages\n      \tdirect_messages: [],\n      \tmessages: [{sender_username: \t\t\"deepakabs\",\n      \t\t\t\tsentAt: \t\t\"Wed Nov 20, 2018 at 11\",\n      \t\t\t\tmessage: \t\t\"1\"\n      \t\t\t  }, \n      \t\t\t  {sender_username: \t\t    \"deepakabs\",\n      \t\t\t\tsenderName:\t\t\"Deepak ABS\",\n      \t\t\t\tprofile_img_url: \"abs\",\n      \t\t\t\tsentAt: \t\t\"Wed Nov 20, 2018 at 11\",\n      \t\t\t\tmessage: \t\t\"2\"\n      \t\t\t  }\n      \t\t\t  ,\n      \t\t\t  {sender_username: \t\t\"deepakabs\",\n      \t\t\t\tsenderName:\t\t\"Deepak ABS\",\n      \t\t\t\tprofile_img_url: \"abs\",\n      \t\t\t\tsentAt: \t\t\"Wed Nov 20, 2018 at 11\",\n      \t\t\t\tmessage: \t\t\"3\"\n      \t\t\t  }, \n      \t\t\t  {sender_username: \t\t    \"deepakabs\",\n      \t\t\t\tsenderName:\t\t\"Deepak ABS\",\n      \t\t\t\tprofile_img_url: \"abs\",\n      \t\t\t\tsentAt: \t\t\"Wed Nov 20, 2018 at 11\",\n      \t\t\t\tmessage: \t\t\"4\"\n      \t\t\t  }]\n      }\t\t  \n        \n        //          \n        this.handleChange = this.handleChange.bind(this);\n    \tthis.send_direct_message = this.send_direct_message.bind(this);       \t\n\n    }\n\n\n    /* @name: send_direct_message \n       @descr: Send the message to the db and update the status\n    */ \n   send_direct_message(event) {\n   \t\tevent.preventDefault();\n   \t\tconsole.log(\"Nemam Amma Bhagavan Sharanam -- send_direct_message\");\n    \t// 1. Create message object\n    \tvar date \t\t= new Date();\n    \tvar\tdate_str \t= date.toDateString();\n    \tvar message \t= this.state.new_message;\n        message = message.trim();\n        var direct_message = {};\n    \tif (message) {\n    \t\n    \t \tvar timestamp \t= date.getTime();\n     \t\t  \tdirect_message = {\n                            message:  message,\n                            sender_username:   this.props.current_user.username,\n                            receiver_username: this.props.selected_user.username,\n                            id:       timestamp + \"_\" + this.props.current_user.username,   \n                            \n                            // Boolean indicating if message is sent\n                            sent:   false,\n                           \tread: \tfalse,\n                            // Display date for the first message in a day\n                            display_date: this.sent_dates_list.indexOf(date_str) ? false : true,\n                            date_string:  date_str\n      \t\t};\n\n      \t\t// Update sent_dates_list\n      \t\tif (direct_message.display_date) this.sent_dates_list.push(date);\n\n      \t\tthis.setState({\n\t    \t\tdirect_messages: [...this.state.direct_messages, direct_message]\n\t    \t});\n\n      \t\tfetch(\"/api/sendDirectMessage\", {\n\t\t\t  method: 'POST', // or 'PUT'\n\t\t\t  body: direct_message,\n\t\t\t})\n\t\t\t.then((response) =>response.json())\n\t\t\t.then((data) => {\n\n\t\t\t\tconsole.log(\"Nemam Amma Bhagavan Sharanam -- sent data\", data);\n\t\t\t\t// If message is delivered\n\t\t\t\tif (data.sent) {\n\t\t\t\t\t// Update message with status\n\t\t\t\t\t this.setState({\n\t\t\t\t\t      direct_messages: this.state.direct_messages.map((el) => (el.id === data.id) ?\n\t\t\t\t\t      \t\t\t\t\t\t\t\t\t\t\t\t\t\t  Object.assign({}, el, {\n\t\t\t\t\t      \t\t\t\t\t\t\t\t\t\t\t\t\t\t  \tsent: true,\n\t\t\t\t\t      \t\t\t\t\t\t\t\t\t\t\t\t\t\t  \tcreatedAt: data.createdAt\n\t\t\t\t\t      \t\t\t\t\t\t\t\t\t\t\t\t\t\t  })\n\t\t\t\t\t      \t\t\t\t\t\t\t\t\t\t\t\t\t\t  : el)\n\t\t\t\t\t    });\t\n\n\t\t\t\t}\n\t\t\t})\n\t\t\t// Don't modify the messages\n\t\t\t.catch((err) => {\n\n\t\t\t})\n      \t\tconsole.log(\"Nemam Amma Bhagavan Sharanam -- message\", direct_message);\n\t    \t\n\t    \t// Save the new message in database\n      \t\t\n      \t\t// Update sent status \n  \t\t}\n\n\n  }\n\n   /* @name: handleChange: \n      @descr: Update text field when user modifies it\n \t*/\n \thandleChange(event) {\n \t event.preventDefault();\n   \t this.setState({new_message: event.target.value});\n  \t}\t\n    // Scroll to bottom\n    scrollToBottom = () => {\n\t  this.messagesEnd.scrollIntoView({ behavior: \"smooth\" });\n\t}\n\n\tcomponentDidMount() {\n\t  this.scrollToBottom();\n\t}\n\n\tcomponentDidUpdate() {\n\t  this.scrollToBottom();\n\t}\n\trender() {\n\n\t\treturn (\n\t\t\t<div className=\"direct-message-history-wrapper\">\n\t\t\t<div className=\"direct-message-history\">\n\t\t\n\t\t \t   {this.state.direct_messages.map((message) => \n\t\t \t\t \t<Message message = {message} current_user = {this.props.current_user}  selected_user = {this.props.selected_member}> </Message>\n\t\t \t\t)}\n\t\t \t\t <div style={{ float:\"left\", clear: \"both\" }}\n\t\t             ref={(el) => { this.messagesEnd = el; }}>\n\t\t        </div>\n\t\t\t</div>\n\n\t\t\t<hr/>\n\t\t\t <form onSubmit={this.send_direct_message}>\n\t\t        <label>\n\n\t\t          <textarea className=\"send-message-textarea\" value={this.state.new_message} onChange={this.handleChange} />\n\t\t        </label>\n\t\t        <input type=\"submit\" value=\"Send\" />\n\t\t      </form>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nclass Message extends Component {\n\t\t\n\tconstructor() {\n\t\tsuper();\n\t}\n\trender() {\n\t\tlet status = \"\";\n\t\t\n\t\t// If message is sent\n\t\tif (!this.props.message.sent){\n\t\t\tstatus = <span style={{color: '#423', float:'right', 'font-size':'10px'}}> Sending... </span>\n\t\t}\n\t\t\n\t\t// If message is sent but unread\n\t\telse if(this.props.message.sent && !this.props.message.read) {\n\t\t\tstatus = <span style={{color: '#723', float:'right', 'font-size':'10px'}}> Sent at {this.props.message.createdAt} </span>\n\t\t}\n\n\t\telse if(this.props.message.sent && this.props.message.read) {\n\t\t\tstatus = <span style={{color: '#9AF', float:'right', 'font-size':'10px'}}> Seen at {this.props.message.updatedAt} </span>\n\t\t}\n\n\t \tif (this.props.current_user.username == this.props.message.sender_username) {\n\n\t\treturn (\n\t\t\t\t// If message is sent by user style it differently\n\t\t\t\t<React.Fragment>\n\t\t\t\t<ul className=\"sent-message-ul\">\n\t\t\t\t\t<li>\n\t\t\t\t\t\t{this.props.current_user.profile_image_url}\n\t\t\t\t\t\t<br/>\n\t\t\t\t\t\tYou\n\t\t\t\t\t</li>\n\t\t\t\t\t<li> \n\t\t\t\t\t\t<span className=\"sent-message\">\n\t\t\t\t\t\t\t{this.props.message.message}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t\t<br/>\n\t\t\t\t\t\t<br/>\n\n\t\t\t\t\t\t{status}\n\t\t\t\t\t</li>\n\t\t\t\t\n\t\t\t\t</ul>\t\t\n\t\t\t\t</React.Fragment>\n\t\t\t\t\n\t \t\t)\n\t\t}\n\t\n\t}\t\n}\n\n\n\n"]},"metadata":{},"sourceType":"module"}